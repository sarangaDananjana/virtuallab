# ---------- HTTP (80): ACME + redirect to HTTPS ----------
server {
  listen 80;
  server_name virtuallabgames.com www.virtuallabgames.com;

  # Allow Let's Encrypt HTTP-01 challenges
  location /.well-known/acme-challenge/ {
    root /var/www/certbot;
  }

  # Redirect everything else to HTTPS (preserve host + path + query)
  location / {
    return 301 https://$host$request_uri;
  }
}

# Optional: upgrade header mapping for websockets
map $http_upgrade $connection_upgrade {
  default upgrade;
  ''      close;
}

# ---------- HTTPS (443): proxy to Django/Gunicorn ----------
server {
  listen 443 ssl http2;
  server_name virtuallabgames.com www.virtuallabgames.com;

  # Your certs issued by certbot (mounted via docker volumes)
  ssl_certificate     /etc/letsencrypt/live/virtuallabgames.com/fullchain.pem;
  ssl_certificate_key /etc/letsencrypt/live/virtuallabgames.com/privkey.pem;

  # Reasonable TLS settings (safe to keep; adjust as you like)
  ssl_protocols TLSv1.2 TLSv1.3;
  ssl_session_timeout 1d;
  ssl_session_cache shared:SSL:10m;
  ssl_session_tickets off;

  # Enable once you're sure HTTPS works for both hosts for a while:
  # add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;

  # If you *aren't* using WhiteNoise, you could serve static/media here by mounting volumes and adding:
  # location /static/ { alias /static/; }
  # location /media/  { alias /media/;  }

  location / {
    proxy_pass http://web:8000;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;

    # websocket support
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection $connection_upgrade;

    proxy_read_timeout 60s;
  }
}
