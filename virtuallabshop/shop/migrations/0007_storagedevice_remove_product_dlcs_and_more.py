# Generated by Django 5.2.5 on 2025-08-16 13:31

import django.core.validators
import django.db.models.deletion
from decimal import Decimal
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('shop', '0006_gamerequest'),
    ]

    operations = [
        migrations.CreateModel(
            name='StorageDevice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('price', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=10)),
                ('currency', models.CharField(default='LKR', max_length=3)),
                ('true_capacity_gb', models.DecimalField(decimal_places=2, help_text='Real usable capacity in GB (e.g., 931.51 for a 1TB drive).', max_digits=7, validators=[django.core.validators.MinValueValidator(0)])),
                ('marketing_capacity_gb', models.DecimalField(decimal_places=2, help_text='Label/box capacity in GB (e.g., 1000.00 for a 1TB drive).', max_digits=7, validators=[django.core.validators.MinValueValidator(0)])),
                ('image', models.ImageField(help_text='16:9 landscape image recommended.', upload_to='storage_devices/%Y/%m/%d/')),
                ('category', models.CharField(choices=[('hard_disk', 'Hard disk'), ('portable_hard_disk', 'Portable hard disk'), ('pen', 'Pen drive')], help_text='Hard disk, Portable hard disk, or Pen drive.', max_length=32)),
            ],
            options={
                'ordering': ['category', 'true_capacity_gb', 'name'],
            },
        ),
        migrations.RemoveField(
            model_name='product',
            name='dlcs',
        ),
        migrations.RemoveField(
            model_name='product',
            name='is_dlc',
        ),
        migrations.AddField(
            model_name='product',
            name='edition',
            field=models.CharField(default='Standard Edition', max_length=255),
        ),
        migrations.AlterField(
            model_name='product',
            name='currency',
            field=models.CharField(default='LKR', max_length=3),
        ),
        migrations.CreateModel(
            name='DLC',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
                ('image', models.ImageField(upload_to='products/dlcs/%Y/%m/%d/')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dlcs', to='shop.product')),
            ],
            options={
                'ordering': ['id'],
            },
        ),
        migrations.AddField(
            model_name='cart',
            name='storage_device',
            field=models.ForeignKey(blank=True, help_text='The single storage device (right side) for this cart.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='carts', to='shop.storagedevice'),
        ),
        migrations.CreateModel(
            name='CartStorageItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField(default=1, validators=[django.core.validators.MinValueValidator(1)])),
                ('unit_price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('added_at', models.DateTimeField(auto_now_add=True)),
                ('cart', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='shop.cart')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='shop.product')),
            ],
            options={
                'unique_together': {('cart', 'product')},
            },
        ),
    ]
